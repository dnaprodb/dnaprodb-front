#!/home/conda/bin/python

#  Copyright 2019, Jared Sagendorf, All rights reserved.
#  
#  Correspondance can be sent by e-mail to Jared Sagendorf <sagendor@usc.edu>
#  
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#  
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.

import cgi
import cgitb
import json
import pymongo
import re
import os
from pymongo import MongoClient

from jinja2 import Environment, FileSystemLoader

def compile_regex(search_dict, field):
    # compile any regex expressions found in search query string
    for key, value in search_dict.iteritems():
        if key == field:
            search_dict[key] = re.compile(value.strip('/'))
        elif isinstance(value, dict):
            compile_regex(value,field)
        elif isinstance(value, list):
            for item in value:
                if isinstance(item, dict):
                    compile_regex(item, field)
        elif(key == "$not" and isinstance(value, basestring)):
            if(re.search('^/.*/$', value)):
                search_dict[key] = re.compile(value.strip('/'))

def printOutput(context, template):
    html = template.render(context)
    print "Content-Type: text/html"
    print 
    print html
    exit(0)

# retrieve GET/POST data
cgitb.enable()
data = cgi.FieldStorage()
query = data.getvalue("query", "{}")
db = data.getvalue("db", "dnaprodb2")
collection = data.getvalue("collection", "dna-protein")

# setup the HTML templates
TEMPLATE_PATH = os.path.abspath("../htdocs/templates")
TEMPLATE_NAME = "results_template.html"
NAV_PATH = os.path.join(TEMPLATE_PATH, "nav.html")
FOOT_PATH = os.path.join(TEMPLATE_PATH, "foot.html")

j2Env = Environment(loader=FileSystemLoader(TEMPLATE_PATH),trim_blocks=True)
template = j2Env.get_template(TEMPLATE_NAME)

with open(NAV_PATH,'r') as NAV:
    nav_html = NAV.read()

with open(FOOT_PATH,'r') as FOOT:
    foot_html = FOOT.read()
    
REPORT_URL = """ <p> <a href='/cgi-bin/report?pdbid={0}'> {0} </a> </p>"""


# compile the query
try:
    query_d = json.loads(query)
    compile_regex(query_d, "$regex")
except:
    html_content = """
    <div style="height:300px">
            <div class="alert alert-danger" style="margin-top: 20px;">
                <strong>Error!</strong> Invalid query.
            </div>
            <p>The query string you have submitted is invalid or contains
            an invalid regular expression. Please check that you have used a properly 
            formatted JSON string.</p>
            <p> Query String: {} </p>
    </div>
    """.format(query)
    context = {
        'noerror': False,
        'nav': nav_html,
        'foot': foot_html,
        'content': html_content
    }
    printOutput(context, template)

# check that the query is not empty
if(len(query_d) == 0):
    html_content = """
    <div style="height:300px">
            <div class="alert alert-danger" style="margin-top: 20px;">
                <strong>Error!</strong> Empty query.
            </div>
            <p> The query string you have submitted is empty.</p>
    </div>
    """
    context = {
        'noerror': False,
        'nav': nav_html,
        'foot': foot_html,
        'content': html_content
    }
    printOutput(context, template)

# connect to MongoDB
try:
    client = MongoClient()
except pymongo.errors.ConnectionFailure:
    html_content = """
     <div style="height:300px">
            <div class="alert alert-danger" style="margin-top: 20px;">
                <strong>Error!</strong> Could not connect to database.
            </div>
            <p> Internal database error. Please try again later. </p>
    </div>
    """
    context = {
        'noerror': False,
        'nav': nav_html,
        'foot': foot_html,
        'content': html_content
    }
    printOutput(context, template)

# check that the db/collection are valid
try:
    dname = client[db].name
    cname = client[db][collection].name
except pymongo.errors.InvalidName:
    html_content = """
     <div style="height:300px">
            <div class="alert alert-danger" style="margin-top: 20px;">
                <strong>Error!</strong> Invalid database.
            </div>
            <p> Invalid database name: {} </p>
    </div>
    """.format(db)
    context = {
        'noerror': False,
        'nav': nav_html,
        'foot': foot_html,
        'content': html_content
    }
    printOutput(context, template)
except pymongo.errors.CollectionInvalid:
    html_content = """
    <div style="height:300px">
            <div class="alert alert-danger" style="margin-top: 20px;">
                <strong>Error!</strong> Invalid collection.
            </div>
            <p> Invalid mongoDB collection name: {} </p>
    </div>
    """.format(collection)
    context = {
        'noerror': False,
        'nav': nav_html,
        'foot': foot_html,
        'content': html_content
    }
    printOutput(context, template)

# search mongoDB
try:
    results = client[db][collection].find(query_d, {
        "structure_id": 1,
        #"interfaces.models.interface_features.interface_type": 1,
        #"dna.sequence_features.sequence1": 1,
        "protein.chains.GO_molecular_function": 1,
        "dna.models.entities.type": 1,
        "dna.num_nucleotides": 1,
        "protein.num_residues": 1,
        "protein.chains.uniprot_names": 1,
        "protein.chains.organism": 1,
        "meta_data.citation_data.authors": 1,
        "meta_data.citation_data.exp_method": 1,
        "meta_data.citation_data.structure_title": 1
    })
except pymongo.errors.OperationFailure:
    html_content = """
    <div style="height:300px">
            <div class="alert alert-danger" style="margin-top: 20px;">
                <strong>Error!</strong> Query failed.
            </div>
            <p> Please verify that your query is a valid mongoDB query.</p>
            <p> Query String: {} </p>
    </div>
    """.format(query)
    context = {
        'noerror': False,
        'nav': nav_html,
        'foot': foot_html,
        'content': html_content
    }
    printOutput(context, template)

# redirect if a single result is returned
if(results.count() == 1):
    pdbid = next(results)['structure_id']
    print "Status: 303 See other"
    print "Location: /cgi-bin/report?pdbid={}".format(pdbid)
    print 
    exit(0)

# notify if no result was returned
if(results.count() == 0):
    html_content = """
     <div style="height:300px">
            <div class="alert alert-danger" style="margin-top: 20px;">
                No matches found!
            </div>
            <p> No results were found for this query. Try reducing the number of 
            search parameters.</p>
        </div>
    """
    context = {
        'noerror': False,
        'nav': nav_html,
        'foot': foot_html,
        'content': html_content
    }
    printOutput(context, template)

# construct the results and return the page
resultObjects = [];
size_str = '<span style="white-space:nowrap;">{} nucleotides</span><br><span style="white-space:nowrap;">{} residues</span>'
for r in results:
    #if(len(r['dna']['sequence_features']['sequence1']) > 20):
    #    seq = ""
    #    for i in range(len(r['dna']['sequence_features']['sequence1'])/20):
    #        seq += "{}\n".format(r['dna']['sequence_features']['sequence1'][i*20:(i+1)*20])
    #    seq += r['dna']['sequence_features']['sequence1'][(i+1)*20:-1]
    #else:
    #    seq = r['dna']['sequence_features']['sequence1']
    names = []
    organisms = []
    for chain in r['protein']['chains']:
        if(chain['uniprot_names'][0] not in names):
            names.append(chain['uniprot_names'][0])
        if(chain['organism'] not in organisms):
            organisms.append(chain['organism'])
    # Get author list
    authors = r['meta_data']['citation_data']['authors']
    if(not isinstance(authors, list)):
        authors = [authors]
    if(len(authors) > 3):
        authors = "{} et al.".format(authors[0])
    elif(len(authors) > 1):
        authors = ', '.join(authors[:-1])+" and "+authors[-1]
    else:
        authors = authors[0]
    
    # Get model types
    etypes = set()
    for mi in xrange(len(r['dna']['models'])):
        for ei in xrange(len(r['dna']['models'][mi]['entities'])):
            etypes.add(r['dna']['models'][mi]['entities'][ei]['type'])
    
    # Compile results
    resultObjects.append({
        'pdbid': r["structure_id"],
        #'protein_function': r['interactions']['interface_features']['interface_type'],
        'citation': r['meta_data']['citation_data']['structure_title'],
        'size': size_str.format(r["dna"]["num_nucleotides"], r["protein"]["num_residues"]),
        'dna_entity_types': '<br>'.join(etypes),
        'authors': authors,
        'method': r['meta_data']['citation_data']['exp_method'],
        'uniprot_name': '<br>'.join(names),
        'organism': ', '.join(organisms),
        'thumbnail_url': "/data/{}/{}_thumb.png".format(r["structure_id"][-1], r["structure_id"])
    })

#html_content = """
        #<h3>Your search returned <span id="result_count"></span> results.</h3>
        #<ul class="nav nav-tabs">
            #<li class="nav-item">
                #<a data-toggle="tab" class="nav-link active" href="#table_tab">Results Overview</a>
            #</li>
            #<li class="nav-item">
                #<a data-toggle="tab" class="nav-link" href="#tv_gallery_tab">Structure Gallery</a>
            #</li>
        #</ul>
        #<div class="tab-content">
            #<div id="table_tab" class="tab-pane fade show active">
            #</div>
            #<div id="tv_gallery_tab" class="tab-pane fade">
                #<ul id="tv_gallery">
                #</ul>
            #</div>
        #</div>
    #</div>
#"""

html_content = """
<h3>Your search returned <span id="result_count"></span> results.</h3>
<table id="search_results_table" class="table table-striped table-bordered">
    <thead>
        <th></th>
        <th>Thumbnail</th>
        <th>PDBID</th>
        <th>Protein Name(s)</th>
        <th>DNA Entity Type(s)</th>
        <th>Structure Size</th>
        <th>Organism</th>
        <th>Structure Method</th>
        <th>Title</th>
        <th>Authors</th>
    </thead>
    <tfoot>
        <th></th>
        <th>Thumbnail</th>
        <th>PDBID</th>
        <th>Protein Name(s)</th>
        <th>DNA Entity Type(s)</th>
        <th>Structure Size</th>
        <th>Organism</th>
        <th>Structure Method</th>
        <th>Title</th>
        <th>Authors</th>
    </tfoot>
    <tbody></tbody>
</table>
<a id="json_download_link" class="btn btn-primary btn-lg disabled" download="dnaprodb_data.json">download data for selected <i class="fa fa-download"></i></a>
<button class="btn btn-primary btn-lg" onclick="copyPDBIdentifiers();">copy identifiers to clipboard <i class="fa fa-copy"></i></button>
"""

context = {
    'structureData': json.dumps(resultObjects),
    'nav': nav_html,
    'foot': foot_html,
    'content': html_content,
    'noerror': True
}
printOutput(context, template)

